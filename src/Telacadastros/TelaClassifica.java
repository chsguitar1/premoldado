/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaClassifica.java
 *
 * Created on 15/07/2010, 21:56:25
 */
package Telacadastros;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import modelos.renderAlinha;
import persistencia.Fornxpontuacao;
import persistencia.PontFornecedor;
import Banco.Conexao;
import premoldados.TelaSistema;
import Telaconsulta.TelaConsulta;
import ajuda.PlayMovie;

/**
 *
 * @author chs
 */
public class TelaClassifica extends TelaCadastro implements MouseListener, InternalFrameListener {

    public Fornxpontuacao classificaPer = new Fornxpontuacao();
    public PontFornecedor pontFornPer = new PontFornecedor();
    TelaConsulta consulta;
    TelaFornecedor telafornecedor;
    TelaPontuacao telapontuacao;
    public Vector colu = new Vector();
    private JTable jtTabela = new JTable() {

        boolean[] canEdit = new boolean[]{
            false, false, true
        };

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
        }
    };
    private DefaultTableModel dtm = (DefaultTableModel) jtTabela.getModel();
    private renderAlinha renderer = new renderAlinha();
    public Vector pesos = new Vector();
    public Vector codigo = new Vector();

    /** Creates new form BeanForm */
    public TelaClassifica() {
        jtTabela.addMouseListener(this);

        initComponents();

        acaComboFornecedores.setSelectedIndex(-1);
        acaComboTipoPont.setSelectedIndex(-1);

        dtm.addColumn("Codigo");
        dtm.addColumn("Itens");
        dtm.addColumn("Pontos");
        campos.add(acaTextfieldCodigo);
        campos.add(acaTextfieldTotal);
        campos.add(acaComboFornecedores);
        campos.add(acaComboTipoPont);
        campos.add(acaBotoesNFor);
        campos.add(acaBotoesNTipo);
        habilitaCampos(false);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelItensPon = new javax.swing.JPanel();
        acaLabel5 = new componentes.AcaLabel();
        jScrollPane1 = new javax.swing.JScrollPane(jtTabela);
        acaComboTipoPont = new componentes.AcaCombo();
        acaComboTipoPont.buscaResult("SELECT poncod, ponnome FROM PONTUACAO");
        acaBotoesNTipo = new componentes.AcaBotoes(false,"Novo","Novo tipo de Pontuação");
        jPanelPon = new javax.swing.JPanel();
        acaLabel1 = new componentes.AcaLabel();
        acaTextfieldCodigo = new componentes.AcaTextfield(false,"",1);
        acaLabel3 = new componentes.AcaLabel();
        acaComboFornecedores = new componentes.AcaCombo();
        acaComboFornecedores.buscaResult("select forcod, fonome from fornecedor");
        acaLabel4 = new componentes.AcaLabel();
        acaTextfieldTotal = new componentes.AcaTextfield(true,"Total de Pontuacao",1);
        acaBotoesNFor = new componentes.AcaBotoes(false,"Novo","Novo Fornecedor");

        setPreferredSize(new java.awt.Dimension(850, 460));
        setSize(new java.awt.Dimension(850, 460));
        setTitle("Classificação de Fornecedores");

        jPanelItensPon.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Itens da Pontuação", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        acaLabel5.setText("Tipo Pontuação ");

        acaComboTipoPont.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                acaComboTipoPontItemStateChanged(evt);
            }
        });
        acaComboTipoPont.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                acaComboTipoPontFocusGained(evt);
            }
        });

        acaBotoesNTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acaBotoesNTipoActionPerformed(evt);
            }
        });
        acaBotoesNTipo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                acaBotoesNTipoFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanelItensPonLayout = new javax.swing.GroupLayout(jPanelItensPon);
        jPanelItensPon.setLayout(jPanelItensPonLayout);
        jPanelItensPonLayout.setHorizontalGroup(
            jPanelItensPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItensPonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelItensPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelItensPonLayout.createSequentialGroup()
                        .addComponent(acaLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(acaComboTipoPont, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(acaBotoesNTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(215, Short.MAX_VALUE))
        );
        jPanelItensPonLayout.setVerticalGroup(
            jPanelItensPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelItensPonLayout.createSequentialGroup()
                .addGroup(jPanelItensPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(acaLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelItensPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(acaComboTipoPont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(acaBotoesNTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelPon.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Classificação"));

        acaLabel1.setText("Codigo");

        acaTextfieldCodigo.setEditable(false);

        acaLabel3.setText("Fornecedor");

        acaComboFornecedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acaComboFornecedoresActionPerformed(evt);
            }
        });
        acaComboFornecedores.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                acaComboFornecedoresFocusGained(evt);
            }
        });

        acaLabel4.setText("Total de Pontos");

        acaTextfieldTotal.setFont(new java.awt.Font("Arial", 1, 18));

        acaBotoesNFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acaBotoesNForActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPonLayout = new javax.swing.GroupLayout(jPanelPon);
        jPanelPon.setLayout(jPanelPonLayout);
        jPanelPonLayout.setHorizontalGroup(
            jPanelPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(acaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(acaTextfieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(acaLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(acaComboFornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(acaBotoesNFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(acaLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(acaTextfieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanelPonLayout.setVerticalGroup(
            jPanelPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPonLayout.createSequentialGroup()
                .addGroup(jPanelPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(acaBotoesNFor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(acaComboFornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelPonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(acaLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(acaTextfieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(acaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(acaTextfieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelPonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(acaLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getPainelCentral());
        getPainelCentral().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelItensPon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanelPon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelPon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelItensPon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void acaComboFornecedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acaComboFornecedoresActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_acaComboFornecedoresActionPerformed

    private void acaComboTipoPontItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_acaComboTipoPontItemStateChanged
        if (acaComboTipoPont.getSelectedIndex() >= 0) {
            if (acaComboTipoPont.isPopupVisible()) {

                montaTabela("select iteponcod, itenponnome from itenspontuacao where poncod = " + acaComboTipoPont.getValor() + " ");
            }
        }
    }//GEN-LAST:event_acaComboTipoPontItemStateChanged

        private void acaBotoesNForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acaBotoesNForActionPerformed
            if (telafornecedor == null) {
                telafornecedor = new TelaFornecedor();
                telafornecedor.addInternalFrameListener(this);
                TelaSistema.jdp.add(telafornecedor);
                telafornecedor.setVisible(true);
            }
            TelaSistema.jdp.moveToFront(telafornecedor);
            tipoOperacao = NOVOITEM;
        }//GEN-LAST:event_acaBotoesNForActionPerformed

        private void acaBotoesNTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acaBotoesNTipoActionPerformed
            if (telapontuacao == null) {
                telapontuacao = new TelaPontuacao();
                telapontuacao.addInternalFrameListener(this);
                TelaSistema.jdp.add(telapontuacao);
                telapontuacao.setVisible(true);
            }
            TelaSistema.jdp.moveToFront(telapontuacao);
            tipoOperacao = NOVOITEM;
        }//GEN-LAST:event_acaBotoesNTipoActionPerformed

        private void acaComboFornecedoresFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_acaComboFornecedoresFocusGained
            if (tipoOperacao == NOVOITEM) {
                acaComboFornecedores.buscaResult("select forcod,fonome from fornecedor");
            }
        }//GEN-LAST:event_acaComboFornecedoresFocusGained

        private void acaBotoesNTipoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_acaBotoesNTipoFocusGained
            acaComboTipoPont.buscaResult("select poncod,ponnome from pontuacao");
        }//GEN-LAST:event_acaBotoesNTipoFocusGained

        private void acaComboTipoPontFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_acaComboTipoPontFocusGained
            if (tipoOperacao == NOVOITEM) {
                acaComboTipoPont.buscaResult("select poncod,ponnome from pontuacao");
            }
        }//GEN-LAST:event_acaComboTipoPontFocusGained
  @Override
    protected void ajuda() {
        PlayMovie videos = new PlayMovie("classificacao.wmv");


    }
    public void montaTabela(String textoSql) {

        try {
            while (dtm.getRowCount() > 0) {
                dtm.removeRow(0);
            }
            ResultSet rs = Conexao.executaQuery(textoSql);
            ResultSetMetaData rsmd = rs.getMetaData();
            Vector vetor;
            while (rs.next()) {
                vetor = new Vector();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    vetor.add(rs.getString(i + 1));



                }
                dtm.addRow(vetor);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível efetuar a pesquisa");
        }

        TableColumnModel modeloColuna = jtTabela.getColumnModel();
        jtTabela.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                acaTextfieldTotal.setText(calculaTotal(dtm.getValueAt(jtTabela.getSelectedRow(), 2).toString()));

            }
        });
        jtTabela.getTableHeader().setReorderingAllowed(false);
        jtTabela.getColumnModel().getColumn(0).setMaxWidth(50);

        jtTabela.getColumnModel().getColumn(0).setPreferredWidth(95);
        //  jtTabela.getColumnModel().getColumn(0).setResizable(false);
        jtTabela.getColumnModel().getColumn(1).setMaxWidth(200);
        jtTabela.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtTabela.getColumnModel().getColumn(2).setMaxWidth(50);
        jtTabela.getColumnModel().getColumn(2).setPreferredWidth(50);
        boolean[] canEdit = new boolean[]{
            false, false, false, true
        };
        //  jtTabela.getColumnModel().getColumn(1).setResizable(false);
       /*for (int x = 0; x < dtm.getRowCount(); x++) {
        jtTabela.isCellEditable(x, 2);

        }*/


    }

    public void obterCampos() {

        if (tipoOperacao == ALTERANDO || tipoOperacao == EXCLUINDO) {
            classificaPer.setForxcod(Integer.parseInt(acaTextfieldCodigo.getText()));
            pontFornPer.setCodigoClassifica(Integer.parseInt(acaTextfieldCodigo.getText()));
        }
        classificaPer.setPoncod(acaComboTipoPont.getValor());
        classificaPer.setForxpeso(Float.parseFloat(acaTextfieldTotal.getText()));
        classificaPer.setForcod(acaComboFornecedores.getValor());
        for (int x = 0; x < jtTabela.getRowCount(); x++) {
            pesos.add(jtTabela.getValueAt(x, 2));
            codigo.add(jtTabela.getValueAt(x, 0));
            System.out.println(jtTabela.getValueAt(x, 2));
            System.out.println(jtTabela.getValueAt(x, 0));
        }
    }

    public void preencheCampos() {
        acaTextfieldCodigo.setText(String.valueOf(classificaPer.getForxcod()));
        acaTextfieldTotal.setText(String.valueOf(classificaPer.getForxpeso()));
        acaComboFornecedores.setValor(classificaPer.getForcod());
        acaComboTipoPont.setValor(classificaPer.getPoncod());

    }

    @Override
    protected void incluir() {
        campos.removeElement(acaTextfieldCodigo);
        super.incluir();
    }

    @Override
    protected void cancelar() {
        super.cancelar();
        limparPesquisa();
    }

    @Override
    protected void alterar() {
        super.alterar();
        jtTabela.setEnabled(true);

    }

    @Override
    protected void confirmar() {
        if (dtm.getRowCount() > 0) {
            super.confirmar();
            limparPesquisa();
        } else {
            JOptionPane.showMessageDialog(null, "Itens da Pontuação são Obrigatorios");
            return;
        }

    }

    public String calculaTotal(String texto) {

        double soma = 0;
        double valor = 0;
        for (int x = 0; x < dtm.getRowCount(); x++) {
            if (!acaTextfieldTotal.getText().equals("")) {
                soma = soma + Double.parseDouble(jtTabela.getValueAt(x, 2).toString());
            } else {
                soma = valor + Double.parseDouble(jtTabela.getValueAt(x, 2).toString());
                break;
            }
        }

//        soma = soma + valor;
        return String.valueOf(soma);
    }

    @Override
    protected void consultar() {
        if (consulta == null) {
            consulta = new TelaConsulta("Consulta Clasificação", this, new int[]{1, 2}, new String[]{"codigo", "nome"}, "fornecedor", "forcod", "fonome", null);
            colu.add("CODIGO");
            colu.add("NOME");
            consulta.setColu(colu);
            consulta.addInternalFrameListener(this);
            TelaSistema.jdp.add(consulta);
            consulta.setVisible(true);
            tipoOperacao = PESQUISANDO;
        }
        TelaSistema.jdp.moveToFront(consulta);

    }

    @Override
    protected boolean incluirBD() {
        obterCampos();
        if (classificaPer.verificaDuplicidade()) {
            ResultSet rs = null;
            try {
                rs = classificaPer.getInsereRs();
                rs.next();
                pontFornPer.setCodigoClassifica(rs.getInt(1));
                for (int x = 0; x < codigo.size(); x++) {
                    pontFornPer.setCodigoItenPon(Integer.parseInt(codigo.get(x).toString()));
                    pontFornPer.setPesoUnitario(Float.parseFloat(pesos.get(x).toString()));
                    Conexao.executaSql(pontFornPer.getInsereSql());
                }
                limparPesquisa();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    @Override
    protected boolean alterarBD() {
        obterCampos();
        if (classificaPer.verificaDuplicidadeAtualiza()) {
            ResultSet rs = null;
            try {
                Conexao.executaSql(classificaPer.getAtualizaSql());

                pontFornPer.setCodigoClassifica(Integer.parseInt(acaTextfieldCodigo.getText()));

                for (int x = 0; x < codigo.size(); x++) {
                    pontFornPer.setCodigoItenPon(Integer.parseInt(codigo.get(x).toString()));
                    pontFornPer.setPesoUnitario(Float.parseFloat(pesos.get(x).toString()));
                    Conexao.executaSql(pontFornPer.getAtualizaSql());
                }
                limparPesquisa();
            } catch (Exception e) {
            }
            return true;

        }
        return false;
    }

    @Override
    protected boolean excluirBD() {
        classificaPer.setForxcod(Integer.parseInt(acaTextfieldCodigo.getText()));
        pontFornPer.setCodigoClassifica(Integer.parseInt(acaTextfieldCodigo.getText()));
        if ((Conexao.executaSqlExcluir(pontFornPer.getExcluiSql()) == Conexao.DEPENDENCIA) || (Conexao.executaSqlExcluir(classificaPer.getExcluiSql()) == Conexao.OUTROERRO)) {
            habilitaCampos(false);
            habilitaBotoesConsulta(true);
            return false;
        } else {
            return true;
        }

    }

    @Override
    public void consultarDados(int codigo) {

        try {
            classificaPer.setForcod(codigo);
            ResultSet rs = Conexao.executaQuery(classificaPer.getConsultaTodos());
            rs.next();
            classificaPer.setForxcod(rs.getInt(1));
            pontFornPer.setCodigoClassifica(rs.getInt(1));
            classificaPer.setForcod(rs.getInt(2));
            classificaPer.setPoncod(rs.getInt(3));
            classificaPer.setForxpeso(rs.getFloat(4));
            preencheCampos();

            montaTabela(pontFornPer.getConsultaTodos());
            // jtTabela.setEnabled(false);
            habilitaCampos(false);
            habilitaBotoesConsulta(true);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void limparPesquisa() {
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private componentes.AcaBotoes acaBotoesNFor;
    private componentes.AcaBotoes acaBotoesNTipo;
    private componentes.AcaCombo acaComboFornecedores;
    private componentes.AcaCombo acaComboTipoPont;
    private componentes.AcaLabel acaLabel1;
    private componentes.AcaLabel acaLabel3;
    private componentes.AcaLabel acaLabel4;
    private componentes.AcaLabel acaLabel5;
    private componentes.AcaTextfield acaTextfieldCodigo;
    private componentes.AcaTextfield acaTextfieldTotal;
    private javax.swing.JPanel jPanelItensPon;
    private javax.swing.JPanel jPanelPon;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
    }

    public void mouseClicked(MouseEvent e) {
//        if (e.getClickCount() == 2) {
//            acaTextfieldCodIten.setText((String) dtm.getValueAt(jtTabela.getSelectedRow(), 0));
//            acaTextfieldNomeIte.setText((String) dtm.getValueAt(jtTabela.getSelectedRow(), 1));
//            acaTextfieldPonUnit.setText((String) dtm.getValueAt(jtTabela.getSelectedRow(), 2));
//        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
//        double soma = 0;
//        for (int i = 0; i < jtTabela.getRowCount(); i++) {
//            String valor = String.valueOf(jtTabela.getValueAt(i, 1));
//            soma = soma + Double.parseDouble(valor);
//        }
//        acaTextfieldTotal.setText(String.valueOf(soma));
    }

    public void internalFrameOpened(InternalFrameEvent e) {
    }

    public void internalFrameClosing(InternalFrameEvent e) {
    }

    public void internalFrameClosed(InternalFrameEvent e) {
        if (e.getSource() == consulta) {
            consulta = null;
        }
        if (e.getSource() == telafornecedor) {
            telafornecedor = null;
        }
        if (e.getSource() == telapontuacao) {
            telapontuacao = null;
        }
    }

    public void internalFrameIconified(InternalFrameEvent e) {
    }

    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    public void internalFrameActivated(InternalFrameEvent e) {
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {
    }
}
